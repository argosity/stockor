continue
invoice
continue
contnue
coneinu
continue
next
self.sku.does_track_inventory?
quit
continue
next
! @state_machine.config.enum && klass.respond_to?(:defined_enums) && klass.defined_enums.values.any?{ |methods| methods.keys.any?{ | enum | enum + '?' == method_name } }
 @state_machine.config.enum && klass.respond_to?(:defined_enums) && klass.defined_enums.values.any?{ |methods| methods.keys.any?{ | enum | enum + '?' == method_name } }
 @state_machine.config.enum && klass.respond_to?(:defined_enums) &&klass.defined_enums.values.any?{ |methods| methods.keys.any?{ | enum | enum + '?' == method_name } }
 @state_machine.config.enum 
             })
                 methods.keys.any?{ | enum | enum + '?' == method_name }
             klass.defined_enums.values.any?{ |methods|
             klass.respond_to?(:defined_enums) &&
( @state_machine.config.enum &&
@state_machine.config.enum 
klass.defined_enums.values.any?{ |methods| methods.keys.any?{ | enum | enum + '?' == method_name } } 
method_name
klass.defined_enums.values
quit
continue
klass.defined_enums.values.any?{ |methods| p methods } 
s.keys{|k| k == 'f'}
s.keys
s={"open"=>1, "paid"=>5, "partialy_paid"=>10}
s.keys{ | enum | enum == 'f' }
s.keys{ |enum| enum == 'f' }
s.keys{ |enum| enum == 'f'}
s.keys
s={"open"=>1, "paid"=>5, "partialy_paid"=>10}
klass.defined_enums.values.any?{ |methods| p methods } 
klass.defined_enums.values.any?{ |methods| p methods } }  
klass.defined_enums.values.any?{ |methods| p methods }} 
klass.defined_enums.values.any?{ |methods| methods.keys{| enum |  enum + '?' == method_name } }
klass.defined_enums.values.any?{ |methods| methods.keys{| enum |  puts enum; false } }
klass.defined_enums.values.any?{ |methods| methods.keys{| enum |  puts enum; enum + '?' == method_name } }
klass.defined_enums.values.any?{ |methods| methods.keys{| enum |  p enum; enum + '?' == method_name } }
klass.defined_enums.values.any?{ |methods| methods.keys{| enum |  enum + '?' == method_name } }
klass.defined_enums.values.any?{ |methods| methods.keys{| enum | p enum; enum + '?' == method_name } }
method_name
klass.defined_enums.values.any?{ |methods| methods.keys{| enum | enum + '?' == method_name } }
klass.defined_enums.values
klass.defined_enums
klass.defined_enums.
klass
continue
self.state
continue
self.state
continue
self.state
continue
self.state
continue
self.mark_partialy_paid!
self.state
self.status
self.may_mark_partialy_paid?
quit
continue
subscriptions.identifiers
subscriptions.class
subscriptions
self.channel subscriptions
self.channel
self.channels
self
connection
self.current_user
q
request.session['user_id']
Lanes::User.where(id: request.session['user_id']).first
request.session['user_id']
request.session
request
env.keys
env
env.session
env
session
env['lanes.session']
q
name
q
continue
input[:metadata].keys
input[:metadata]
input[:uri]
input[:source_path]
input[:name].split('/').slice(0..-2)
input[:name].split('/').slice(-1)
input[:name].split('/').slice(0..-1)
input[:name].split('/').pop
input[:name].split('/')
input[:name]
input[:load_path]
input[:source_path]
input.keys
input
quit
continue
data
continue
data
data.class
data.bank_account_id
data
continue
glt.credits.first
glt.credits
glt.postings
glt.posting
glt.postings
glt
glt.object_id
next
transaction.object_id
up
self.object_id
up
self.object_id
self.id
self
step
amount
debit
credit
next
self.current
continue
 glt.credits.first.account_number
continue
entry.amount * -1
entry.amount
continue
 glt.credits.first.account_number
 glt.credits.first
 glt.credits
 glt
continue
current_scope.select_values
current_scope
current_query
self
select_values
continue
select_values
p q
q
q.select_values.include?("#{t}.*")
next
q.select_values.include?("#{t}.*")
continue
current_scope.select_values
select_values
current_scope
continue
current_scope
current_scope.class
current_scope.to_sql
current_scope
continue
backtrace
continue
bang()
self
continue
column_names
table_name
continue
table_name
continue
self.name
self
continue
arel_table
continue
column_names
self
continue
conintue
results
next
specs
next
continue
results
q
options[:spec_dir]
[1,2].uniq
[1,2].uniq!
[1,2]
paths
specs
options
Inspector.clean(specs, options)
next
Inspector.clean(specs, options)
options[:clean]
paths
options[:keep_failed]
options
q
backtrace
continue
params['id']
params
q
user.id
params['review']
params
user.roles.include? 'accounting'
user.roles.include? 'administrator'
user.roles.include? 'accounting'
user.roles.include? :accounting
user.roles.include? :aaccounting
user.roles
user
query
params
q
record.categories[0]
record
record.categories[0]
continue
record.categories[0]
record.categories
record
continue
next
quit
ut
key
e
next
nx
continue
self.nested_attributes_options
step
self.class
name
self.class.has_exported_nested_attribute?(name, user)
continue
categories
continue
query.dup.to_sql
continue
self
self.class.to_s.demodulize.tableize.singularize + '_' + primary_key
continue
self
